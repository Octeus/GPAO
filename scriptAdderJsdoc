const fs = require('fs'),
    path = require('path'),
    fse = require('fs-extra'),
    { JSDOM } = require( "jsdom" ),
    { window } = new JSDOM( "" ),
    $ = require( "jquery" )( window ),
    targetScript = path.join(__dirname, '../Docs/MRP/jsdoc/scripts/collapse.js'),
    targetCss = path.join(__dirname, '../Docs/MRP/jsdoc/styles/jsdoc.css'),
    newScript = path.join(__dirname, '../DocsCustomAssets/custom.js'),
    newCss = path.join(__dirname, '../DocsCustomAssets/custom.css'),
    targetHTML = path.join(__dirname, '../Docs/MRP/jsdoc/');

try {

    fse.copySync(path.join(__dirname, 'public/assets/media/img/favicon.png'), path.join(__dirname, '../Docs/favicon.png'));
    console.log('Copy favicon.png to jsdoc folder done !');
    fse.copySync(path.join(__dirname, 'public/assets/media/img/logo.svg'), path.join(__dirname, '../Docs/MRP/jsdoc/logo.svg'));
    fse.copySync(path.join(__dirname, 'public/assets/media/img/logo.svg'), path.join(__dirname, '../Docs/Card/jsdoc/logo.svg'));
    fse.copySync(path.join(__dirname, 'public/assets/media/img/logo.svg'), path.join(__dirname, '../Docs/App/jsdoc/logo.svg'));
    console.log('Copy logo.svg to jsdoc folders done !');
    fse.copySync(path.join(__dirname, 'public/assets/media/img/bg.jpg'), path.join(__dirname, '../Docs/MRP/jsdoc/bg.jpg'));
    console.log('Copy bg.jpg to jsdoc folder done !');

} catch (err) {
    console.error(err);
}

try {

    let js = fs.readFileSync(targetScript, {encoding: 'utf8', flag: 'r'}),
        css = fs.readFileSync(targetCss, {encoding: 'utf8', flag: 'r'}),
        customJS = fs.readFileSync(newScript, {encoding: 'utf8', flag: 'r'}),
        customCSS = fs.readFileSync(newCss, {encoding: 'utf8', flag: 'r'});

    let compileJS = js + "\n\n/*==== Custom JS ====*/\n\n" + customJS,
        compileCSS = css + "\n\n/*==== Custom CSS ====*/\n\n" + customCSS;

    fs.readdir(targetHTML, (err, files) => {

        if (err) {

            console.log('Failed reading IconsRef directory', err);

        } else {

            if (files.length > 0) {

                fse.copySync(path.join(__dirname, '../DocsCustomAssets/index.html'), path.join(__dirname, '../Docs/index.html'));
                console.log('Copy index.html to Docs folder done !');
                fse.copySync(path.join(__dirname, '../DocsCustomAssets/product.custom.html'), path.join(__dirname, '../Docs/MRP/jsdoc/product.custom.html'));
                console.log('Copy product.custom.html to Docs/jsdoc folder done !');
                fse.copySync(path.join(__dirname, '../DocsCustomAssets/trello.custom.html'), path.join(__dirname, '../Docs/MRP/jsdoc/trello.custom.html'));
                console.log('Copy trello.custom.html to Docs/jsdoc folder done !');


            } else {

                console.log('The jsdoc directory is empty');
            }

        }
    });

    //DataCommander
    fs.writeFileSync(targetScript, compileJS);
    fs.writeFileSync(targetCss, compileCSS);

    //Card
    if (fs.existsSync(path.join(__dirname, '../Docs/Card/jsdoc/scripts/collapse.js'))) {
        fs.writeFileSync(path.join(__dirname, '../Docs/Card/jsdoc/scripts/collapse.js'), compileJS);
        fs.writeFileSync(path.join(__dirname, '../Docs/Card/jsdoc/styles/jsdoc.css'), compileCSS);
    }

    //App
    if (fs.existsSync(path.join(__dirname, '../Docs/App/jsdoc/scripts/collapse.js'))) {
        fs.writeFileSync(path.join(__dirname, '../Docs/App/jsdoc/scripts/collapse.js'), compileJS);
        fs.writeFileSync(path.join(__dirname, '../Docs/App/jsdoc/styles/jsdoc.css'), compileCSS);
    }

    console.log('Customs Script & Stylesheet appended to originals assets successfully !');

} catch (err) {

    console.log('Failed to append customs Script & Stylesheet to original jsdoc assets...', err);
}

try {

    let json = {
        'module': 'get_trello',
        'lang': 'fr',
        'api': 'OcteusApis',
        'token': '$ghtF52Dfr584Reds2899RTGhjyD52F68ev55',
        'data': ''
    };

    $.post('https://api.octeus.fr', json, function(data, status){
        if (status === 'success') {
            if (isJson(data)) {
                treatData(JSON.parse(data), true);
            } else {
                treatData(data, false)
            }
        } else {
            console.log('Failed to load data from XHR call...');
        }
    });

} catch (err) {

    console.log('Error while accessing API server...', err);
}

function isJson(str) {

    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

function treatData(json, format) {

    if (format === false) {
        console.log(json);
    } else {
        fs.writeFileSync(path.join(__dirname, '../Docs/MRP/jsdoc/scripts/trello.js'), 'let trello = ' + JSON.stringify(json.data, null, 4));
    }
}